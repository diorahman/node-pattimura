//=======================================================================
// Copyright abeinoe 2015.
// Distributed under the MIT License.
// (See accompanying file LICENSE or copy at
//  http://opensource.org/licenses/MIT)
//=======================================================================

#ifndef PATTIMURA_H
#define PATTIMURA_H

#define PATTIMURA_BLOCKBITS         128
#define PATTIMURA_BLOCKBYTES        (PATTIMURA_BLOCKBITS/8)
#define PATTIMURA_IVBITS            128
#define PATTIMURA_IVBYTES           (PATTIMURA_IVBITS/8)

/* supported modes */
#define PATTIMURA_FREE		  0	  /* free, not initialized yet */
#define PATTIMURA_OFB		  1	  /* OFB full feedback encryption-decryption */
#define PATTIMURA_ECB_ENC     2   /* ECB encryption */
#define PATTIMURA_ECB_DEC     3   /* ECB decryption */
#define PATTIMURA_CBC_ENC     4   /* CBC encryption */
#define PATTIMURA_CBC_DEC     5   /* CBC decryption */
#define PATTIMURA_CTR         6   /* CTR counter mode encryption-decryption */
#define PATTIMURA_MODES       7

static const unsigned char PATTIMURA_default_userbox[] = {   0xc0, 0x5d, 0x5b, 0xfc, 0x73, 0x46, 0x16, 0xc3, 0x3c, 0xbb,
                                                             0xdc, 0x15, 0x19, 0x79, 0x63, 0x62, 0x39, 0x0e, 0xa2, 0xfe,
                                                             0xe7, 0xc5, 0x03, 0x1a, 0x2e, 0xc7, 0x3b, 0x08, 0xda, 0xd1,
                                                             0xcf, 0xee, 0x37, 0x5a, 0x2f, 0x44, 0x71, 0xba, 0x24, 0x7b,
                                                             0xd3, 0x43, 0xde, 0x95, 0xdf, 0x4f, 0x2b, 0xf1, 0xeb, 0xc4,
                                                             0xae, 0x5c, 0x7d, 0xbe, 0x11, 0x52, 0xd4, 0xfb, 0x2d, 0x51,
                                                             0x34, 0xf3, 0x82, 0xef, 0x7e, 0x33, 0x76, 0x64, 0xf6, 0x7c,
                                                             0x9f, 0xff, 0x91, 0x97, 0xe2, 0xe9, 0x89, 0xec, 0x17, 0x9b,
                                                             0xa5, 0x31, 0x32, 0xe4, 0x65, 0xd0, 0xac, 0x0c, 0xb1, 0x92,
                                                             0xb0, 0x42, 0x8c, 0x69, 0x2c, 0xf4, 0xd8, 0xaa, 0x8f, 0xe6,
                                                             0x1e, 0xb2, 0x00, 0xd7, 0x59, 0x0d, 0xb8, 0x38, 0xe5, 0x3f,
                                                             0x29, 0xed, 0x8b, 0x58, 0x21, 0x57, 0xb9, 0xf2, 0x2a, 0x12,
                                                             0x30, 0x02, 0x3d, 0xf7, 0xb5, 0x05, 0x35, 0xad, 0x23, 0xa8,
                                                             0x3e, 0x68, 0xa4, 0x72, 0xd5, 0x77, 0x7f, 0xa7, 0x90, 0x9c,
                                                             0x54, 0x53, 0x6e, 0x70, 0xcd, 0x74, 0xd6, 0x66, 0xe8, 0xca,
                                                             0x9a, 0x01, 0xdd, 0xcc, 0x6f, 0xd9, 0x25, 0x80, 0x06, 0x20,
                                                             0x48, 0xf5, 0xa9, 0xf8, 0x6c, 0xf0, 0xe3, 0x45, 0x14, 0x49,
                                                             0x85, 0xb6, 0xbf, 0x84, 0xbc, 0x9e, 0x26, 0x93, 0xe1, 0xcb,
                                                             0xc2, 0xb4, 0xb7, 0x6a, 0x28, 0xd2, 0xab, 0xce, 0x8e, 0x41,
                                                             0x47, 0x22, 0x0a, 0x1f, 0x3a, 0x10, 0x50, 0x1c, 0x94, 0xaf,
                                                             0x4d, 0x07, 0xa1, 0xfd, 0xb3, 0x83, 0x75, 0xbd, 0x0f, 0x4a,
                                                             0x78, 0x0b, 0x98, 0x96, 0x1b, 0x60, 0xa3, 0xdb, 0xea, 0x04,
                                                             0x09, 0x56, 0x4e, 0x61, 0xc6, 0x36, 0xf9, 0xfa, 0x5e, 0x18,
                                                             0xe0, 0x4c, 0x99, 0x6b, 0x4b, 0x87, 0xc8, 0x1d, 0xa6, 0xc1,
                                                             0x81, 0xc9, 0x55, 0x40, 0x9d, 0x67, 0x13, 0x88, 0x5f, 0x7a,
                                                             0x27, 0x8d, 0x8a, 0x6d, 0x86, 0xa0  };

typedef struct {
    unsigned char tw[256];
    unsigned char tx[256];
    unsigned char ty[256];
    unsigned char InitialVector[PATTIMURA_IVBYTES];
    unsigned char mode;
} PATTIMURA_Context;

short PATTIMURA_Open(PATTIMURA_Context *ctx, const unsigned char *cipherKey, short keyBits, unsigned char mode, const unsigned char *userBox);
short PATTIMURA_InitOFB_CBC_CTR(PATTIMURA_Context *ctx, const unsigned char *iv);
short PATTIMURA_EncryptDecript(PATTIMURA_Context *ctx, unsigned char *out, unsigned char *in, short nblocks);

#endif // PATTIMURA_H
